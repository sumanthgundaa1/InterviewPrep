public class Main {
    
    public static class KnightsTour{
        private int m;
        private int n;
        private int[][] matrix;
        
        public KnightsTour(int m, int n){
            this.m = m;
            this.n = n;
            this.matrix =  new int[m][n];
        }
        
        public int[][] initializeMatrix() {
            for(int i = 0; i < m; i++) {
                for(int j = 0; j < n; j++) {
                    matrix[i][j] =  -1;
                }
            }
            return matrix;
        }
        
        public boolean isSafe(int x, int y) {
            return (x >=0 && x < m && y >= 0 && y < n && matrix[x][y] == -1);
        }
        
        public void printSolution() {
            for(int i = 0; i < m; i++) {
                for(int j = 0; j < n; j++) {
                    System.out.print(matrix[i][j] + " ");
                }
                System.out.println();
            }
        }
        
        public boolean KTSolve(int posX, int posY) {
            initializeMatrix();
            
            int[] xMoves = {2, 1, 2, 1, -1, -2, -1, -2};
            int[] yMoves = {1, 2, -1, -2, 2, 1, -2, -1};
            
            matrix[posX][posY] = 0;
            
            if(!KTSolveRecursive(posX, posY, 1, xMoves, yMoves)) {
                System.out.println("Cannot Solve");
                return false;
            } else {
                printSolution();
            }
            return true;
        }
        
        public boolean KTSolveRecursive(int x, int y, int moveNum, int[] xMoves, int[] yMoves) {
            int nextX;
            int nextY;
            if(moveNum == m * n) {
                return true;
            }
            
            for(int k = 0; k < 8; k++) {
                nextX = x + xMoves[k];
                nextY = y + yMoves[k];
                if(isSafe(nextX, nextY)) {
                    matrix[nextX][nextY] = moveNum;
                    if(KTSolveRecursive(nextX, nextY, moveNum + 1, xMoves, yMoves)) {
                        return true;
                    } else {
                        matrix[nextX][nextY] = -1;
                    }
                }
            }
            return false;
        }
    }
    
    public static void main(String[] args) {
        KnightsTour k = new KnightsTour(8, 7);
        k.KTSolve(0, 0);
    }
}
